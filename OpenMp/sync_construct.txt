#include <iostream>
#include <omp.h>

int main()
{
    #pragma omp parallel
    {
        int id = omp_get_thread_num();
        A[id] = big_cal1(id);
    #pragma omp barrier
        B[id] = big_cal2(id,A);
    }
    /*
    Here barrier is type of synchronization construct 
    where each thread wait at the barrier 
    until all threads arrive
    
    In the above example, all thhreads must complete the 
    A[id] =  big_cal1(id)
    then those threads can perform the next operation
    B[id] = big_cal2(id,A);
    */


   float res;
   #pragma omp parallel
   {
    float B;
    int i,id,nthreads;
    id = omp_get_thread_num();
    nthreads = omp_get_num_threads();
    for(i=id;i<niters;i+=nthreads)
    {
        B = big_job(i);
    }
    #pragma omp critical   //Mutual Exclusion
        res += consume(B);
   }
   /*Mutual exclusion -> define a block of code 
   that only one thread at a time can execute */



    #pragma omp parallel
    {
        double temp,B;
        B = DOIT();
        tmp = big_ugly(B);

    #pragma omp atomic
        X+=tmp;
    }

    /*atomic is a short cut to critical 
    (a certain constructs in hardware 
    that are used to perform quick updates
    of values in memory)
    -->atomic says that if those hardware constructs 
    are available, use them 
    otherwise  act as critical*/
}